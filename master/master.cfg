import logging
from os import getuid
from pathlib import Path

import yaml
from buildbot.plugins import *

from factory import ArchBuildFactory
from util import ArchBuildUtil
from worker import ArchBuildWorker

with open('config.yml', 'r') as f:
    config = yaml.load(f)

c = BuildmasterConfig = {}

c['workers'] = [ArchBuildWorker('worker', 'worker')]
c['protocols'] = {'pb': {'port': 8011}}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['services'] = []

c['title'] = 'Arch Build'
c['titleURL'] = config['url']
c['buildbotURL'] = config['url']
c['buildbotNetUsageData'] = None
c['www'] = {
    'port': 8010,
    'plugins': {
        # 'waterfall_view': {},
        # 'console_view': {},
        # 'grid_view': {}
    }
}

admins = config['admins']
if admins:
    c['www']['auth'] = util.UserPasswordAuth(admins)
    c['www']['authz'] = util.Authz(
        allowRules=[
            util.AnyControlEndpointMatcher(role='admin'),
        ],
        roleMatchers=[
            util.RolesFromUsername(roles=['admin'], usernames=admins.keys()),
        ]
    )

c['db'] = {'db_url': 'postgresql://buildbot:buildbot@/buildbot'}

c['properties'] = {'pkgbuilddir': config['pkgbuilddir']}

build_lock = util.MasterLock('build')

for repo in config['repos']:
    repodir = Path(config['repodir']) / repo / 'x86_64'
    if not repodir.is_dir():
        repodir.mkdir(parents=True)

vcs_urls = set()
builders = set()

for group in config['groups']:
    pkgs = group['pkgs']
    if pkgs is not None:
        for pkg in pkgs:
            properties = {
                'pkgbuilddir': config['pkgbuilddir'],
                'srcdir': config['srcdir'],
                'pkgdir': config['pkgdir'],
                'repodir': config['repodir'],
                'sshdir': config.get('sshdir', ''),
                'suffix': config['suffix'],
                'gpg_sign': config['gpg_sign'],
                'group': group['name'],
                'pkg_base': pkg['name'],
                'depends': pkg.get('depends', None),
                **ArchBuildUtil.parse_srcinfo(config['pkgbuilddir'], group['name'], pkg['name'])
            }

            # These can be overridden
            properties.pop('pkg_ver')
            properties.pop('pkg_rel')

            print('adding builder for %s' % pkg['name'])
            c['builders'].append(util.BuilderConfig(
                name=pkg['name'],
                workernames=['worker'],
                factory=ArchBuildFactory(config['pkgbuilddir'], group['name'], pkg['name'], properties),
                locks=[build_lock.access('exclusive')]
            ))

            c['schedulers'].append(schedulers.ForceScheduler(
                name=f"force-{pkg['name']}",
                builderNames=[pkg['name']],
                properties=[
                    util.ChoiceStringParameter(
                        name='repo_name',
                        label='repo',
                        choices=config['repos'],
                        default=pkg['repo'] if 'repo' in pkg else group['repo']
                    ),
                    util.StringParameter(
                        name='pkg_ver',
                        label='pkgver',
                        default=''
                    ),
                    util.StringParameter(
                        name='pkg_rel',
                        label='pkgrel',
                        default=''
                    ),
                    util.StringParameter(
                        name='revision',
                        label='revision',
                        default=''
                    )
                ]
            ))

            vcs_type = properties['vcs_type']
            if vcs_type:
                vcs_url = properties['vcs_url']
                branch = properties[f'{vcs_type}_branch']
                if vcs_url not in vcs_urls:
                    vcs_urls.add(vcs_url)
                    if vcs_type == 'git':
                        print('adding git poller for %s' % vcs_url)
                        c['change_source'].append(changes.GitPoller(
                            repourl=vcs_url,
                            workdir=str(Path(config['srcdir']) / properties['vcs_name']),
                            pollInterval=3600,
                            pollAtLaunch=True
                        ))
                    elif vcs_type == 'hg':
                        print('adding hg poller for %s' % vcs_url)
                        c['change_source'].append(changes.HgPoller(
                            repourl=vcs_url,
                            workdir=str(Path(config['srcdir']) / properties['vcs_name']),
                            pollInterval=3600,
                            pollAtLaunch=True
                        ))
                if properties['git_tag'] or properties['hg_tag']:
                    print('adding tag scheduler for %s' % pkg['name'])
                    change_filter = util.ChangeFilter(repository=vcs_url, branch_re='^refs/tags/.*')
                elif branch:
                    print('adding branch scheduler for %s' % pkg['name'])
                    change_filter = util.ChangeFilter(repository=vcs_url, branch=branch)
                else:
                    print('adding commit scheduler for %s' % pkg['name'])
                    change_filter = util.ChangeFilter(repository=vcs_url, branch='master')
                c['schedulers'].append(schedulers.SingleBranchScheduler(
                    name=pkg['name'],
                    change_filter=change_filter,
                    treeStableTimer=3600,
                    builderNames=[pkg['name']],
                    properties={'repo_name': pkg['repo'] if 'repo' in pkg else group['repo']}
                ))
                builders.add(pkg['name'])

if config['mail_reports']:
    c['services'] += [
        reporters.MailNotifier(
            relayhost=config['mail_host'],
            smtpPort=config['mail_port'],
            useTls=config['mail_starttls'],
            smtpUser=config['mail_user'],
            smtpPassword=config['mail_password'],
            fromaddr=config['mail_sender'],
            extraRecipients=config['mail_recipients'],
            sendToInterestedUsers=False,
            mode=('change',)
        ),
        reporters.MailNotifier(
            relayhost=config['mail_host'],
            smtpPort=config['mail_port'],
            useTls=config['mail_starttls'],
            smtpUser=config['mail_user'],
            smtpPassword=config['mail_password'],
            fromaddr=config['mail_sender'],
            extraRecipients=config['mail_recipients'],
            sendToInterestedUsers=False,
            mode=('passing', 'failing'),
            builders=list(builders)
        ),
    ]
