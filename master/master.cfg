from pathlib import Path

import yaml
from buildbot.plugins import changes, reporters, schedulers, util

from factory import ArchBuildFactory
from util import ArchBuildUtil
from worker import ArchBuildWorker

with open("config.yml", "r") as f:
    config = yaml.load(f)

c = BuildmasterConfig = {}

c["workers"] = [ArchBuildWorker("worker", "worker")]
c["protocols"] = {"pb": {"port": 8011}}
c["change_source"] = []
c["schedulers"] = []
c["builders"] = []
c["services"] = []

c["title"] = "Arch Build"
c["titleURL"] = config["url"]
c["buildbotURL"] = config["url"]
c["buildbotNetUsageData"] = None
c["www"] = {
    "port": 8010,
    "plugins": {
        # 'waterfall_view': {},
        # 'console_view': {},
        # 'grid_view': {}
    },
}

admins = config["admins"]
if admins:
    c["www"]["auth"] = util.UserPasswordAuth(admins)
    c["www"]["authz"] = util.Authz(
        allowRules=[util.AnyControlEndpointMatcher(role="admin")],
        roleMatchers=[util.RolesFromUsername(roles=["admin"], usernames=admins.keys())],
    )

c["db"] = {"db_url": "postgresql://buildbot:buildbot@/buildbot"}

c["properties"] = {"pkgbuilddir": config["pkgbuilddir"]}

build_lock = util.MasterLock("build")

for repo in config["repos"]:
    repodir = Path(config["repodir"]) / repo / "x86_64"
    if not repodir.is_dir():
        repodir.mkdir(parents=True)

git_urls = {}
hg_urls = {}
builders = set()

for group in config["groups"]:
    pkgs = group["pkgs"]
    if pkgs is not None:
        for pkg in pkgs:
            properties = {
                "pkgbuilddir": config["pkgbuilddir"],
                "srcdir": config["srcdir"],
                "pkgdir": config["pkgdir"],
                "repodir": config["repodir"],
                "sshdir": config.get("sshdir", ""),
                "suffix": config["suffix"],
                "gpg_sign": config["gpg_sign"],
                "group": group["name"],
                "pkg_base": pkg["name"],
                "depends": pkg.get("depends", None),
                **ArchBuildUtil.parse_srcinfo(
                    config["pkgbuilddir"], group["name"], pkg["name"]
                ),
            }

            # These can be overridden
            properties.pop("pkg_ver")
            properties.pop("pkg_rel")

            print("adding builder for %s" % pkg["name"])
            c["builders"].append(
                util.BuilderConfig(
                    name=pkg["name"],
                    workernames=["worker"],
                    factory=ArchBuildFactory(
                        config["pkgbuilddir"], group["name"], pkg["name"], properties
                    ),
                    locks=[build_lock.access("exclusive")],
                )
            )

            c["schedulers"].append(
                schedulers.ForceScheduler(
                    name=f"force-{pkg['name']}",
                    builderNames=[pkg["name"]],
                    properties=[
                        util.ChoiceStringParameter(
                            name="repo_name",
                            label="repo",
                            choices=config["repos"],
                            default=pkg["repo"] if "repo" in pkg else group["repo"],
                        ),
                        util.StringParameter(
                            name="pkg_ver", label="pkgver", default=""
                        ),
                        util.StringParameter(
                            name="pkg_rel", label="pkgrel", default=""
                        ),
                        util.StringParameter(
                            name="revision", label="revision", default=""
                        ),
                    ],
                )
            )

            vcs_type = properties["vcs_type"]
            if vcs_type:
                vcs_url = properties["vcs_url"]
                branch = properties[f"{vcs_type}_branch"]
                if vcs_type == "git":
                    filters = git_urls.get(
                        vcs_url,
                        {
                            "vcs_name": properties["vcs_name"],
                            "branches": [],
                            "tags": False,
                        },
                    )
                    if properties["git_tag"]:
                        print("adding tag scheduler for %s" % pkg["name"])
                        filters["tags"] = True
                        change_filter = util.ChangeFilter(
                            repository=vcs_url, branch_re="^refs/tags/.*"
                        )
                        builders.add(pkg["name"])
                    elif branch:
                        filters["branches"].append(branch)
                        print("adding branch scheduler for %s" % pkg["name"])
                        change_filter = util.ChangeFilter(
                            repository=vcs_url, branch=branch
                        )
                    else:
                        filters["branches"].append("master")
                        print("adding commit scheduler for %s" % pkg["name"])
                        change_filter = util.ChangeFilter(
                            repository=vcs_url, branch="master"
                        )
                        if properties["git_revision"]:
                            builders.add(pkg["name"])
                    git_urls[vcs_url] = filters
                    c["schedulers"].append(
                        schedulers.AnyBranchScheduler(
                            name=pkg["name"],
                            change_filter=change_filter,
                            builderNames=[pkg["name"]],
                            properties={
                                "repo_name": pkg["repo"]
                                if "repo" in pkg
                                else group["repo"]
                            },
                            treeStableTimer=14400,
                        )
                    )

                elif vcs_type == "hg":
                    filters = hg_urls.get(vcs_url, {"vcs_name": properties["vcs_name"]})
                    hg_urls[vcs_url] = filters
                    change_filter = util.ChangeFilter(repository=vcs_url)
                    c["schedulers"].append(
                        schedulers.AnyBranchScheduler(
                            name=pkg["name"],
                            change_filter=change_filter,
                            builderNames=[pkg["name"]],
                            properties={
                                "repo_name": pkg["repo"]
                                if "repo" in pkg
                                else group["repo"]
                            },
                            treeStableTimer=14400,
                        )
                    )

for git_url, filters in git_urls.items():
    print("adding git poller for %s" % git_url)
    c["change_source"].append(
        changes.GitPoller(
            repourl=git_url,
            workdir=str(Path(config["srcdir"]) / filters["vcs_name"]),
            pollInterval=28800,
            pollRandomDelayMax=3600,
            pollAtLaunch=True,
            buildPushesWithNoCommits=True,
            branches=lambda ref, filters=filters: filters["tags"]
            and ref.startswith("refs/tags/")
            or ref in [f"refs/heads/{branch}" for branch in filters["branches"]],
        )
    )

for hg_url, filters in hg_urls.items():
    print("adding hg poller for %s" % hg_url)
    c["change_source"].append(
        changes.HgPoller(
            repourl=hg_url,
            workdir=str(Path(config["srcdir"]) / filters["vcs_name"]),
            pollInterval=28800,
            pollRandomDelayMax=3600,
            pollAtLaunch=True,
        )
    )

if config["mail_reports"]:
    c["services"] += [
        reporters.MailNotifier(
            relayhost=config["mail_host"],
            smtpPort=config["mail_port"],
            useTls=config["mail_starttls"],
            smtpUser=config["mail_user"],
            smtpPassword=config["mail_password"],
            fromaddr=config["mail_sender"],
            extraRecipients=config["mail_recipients"],
            sendToInterestedUsers=False,
        )
    ]
