from pathlib import Path

import yaml
from buildbot.plugins import *

from factory import ArchBuildFactory
from util import Srcinfo

with open('config.yml', 'r') as f:
    config = yaml.load(f)

c = BuildmasterConfig = {}

c['workers'] = [worker.Worker('worker', 'worker')]
c['protocols'] = {'pb': {'port': 8011}}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['services'] = []

if config['mail_reports']:
    c['services'].append(reporters.MailNotifier(
        fromaddr=config['sender'],
        extraRecipients=config['recipients'],
        sendToInterestedUsers=False,
        mode=('failing',)
    ))

c['title'] = 'Arch Build'
c['titleURL'] = 'https://buildbot.alucryd.xyz'
c['buildbotURL'] = 'https://buildbot.alucryd.xyz/'
c['buildbotNetUsageData'] = None
c['www'] = {
    'port': 8010,
    'plugins': {
        # 'waterfall_view': {},
        # 'console_view': {},
        # 'grid_view': {}
    }
}
c['db'] = {'db_url': 'sqlite:///state.sqlite'}

c['properties'] = {'pkgbuilddir': config['pkgbuilddir']}

build_lock = util.WorkerLock('worker', maxCount=1)

for repo in config['repos']:
    repodir = Path(config['repodir']) / repo / 'x86_64'
    if not repodir.is_dir():
        repodir.mkdir(parents=True)

for group in config['groups']:
    pkgs = group['pkgs']
    if pkgs is not None:
        for pkg in pkgs:
            properties = {
                'pkgbuilddir': config['pkgbuilddir'],
                'srcdir': config['srcdir'],
                'pkgdir': config['pkgdir'],
                'repodir': config['repodir'],
                'suffix': config['suffix'],
                'gpg_sign': config['gpg_sign'],
                'group': group['name'],
                'pkg_base': pkg['name'],
                'depends': pkg.get('depends', None),
                **Srcinfo.parse(config['pkgbuilddir'], group['name'], pkg['name'])
            }

            c['schedulers'].append(schedulers.ForceScheduler(
                name=f"force-{pkg['name']}",
                builderNames=[pkg['name']],
                properties=[util.ChoiceStringParameter(
                    name='repo_name',
                    choices=config['repos'],
                    default=group['repo']
                )]
            ))
            c['builders'].append(util.BuilderConfig(
                name=pkg['name'],
                workernames=['worker'],
                factory=ArchBuildFactory(config['pkgbuilddir'], group['name'], pkg['name'], properties, build_lock)
            ))
            if properties['vcs_type'] == 'git':
                c['change_source'].append(changes.GitPoller(
                    repourl=properties['vcs_url'],
                    category=pkg['name'],
                    workdir=str(Path(config['srcdir']) / properties['vcs_name']),
                    pollInterval=600,
                    pollAtLaunch=True
                ))
            elif properties['vcs_type'] == 'hg':
                c['change_source'].append(changes.HgPoller(
                    repourl=properties['repo_url'],
                    category=pkg['name'],
                    workdir=str(Path(config['srcdir']) / properties['vcs_name']),
                    pollInterval=600,
                    pollAtLaunch=True
                ))
            if properties['vcs_type']:
                c['schedulers'].append(schedulers.SingleBranchScheduler(
                    name=pkg['name'],
                    change_filter=util.ChangeFilter(category=pkg['name']),
                    treeStableTimer=3600,
                    builderNames=[pkg['name']],
                    properties={'repo_name': group['repo']}
                ))
