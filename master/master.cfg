from os import getuid
from pathlib import Path

import yaml
from buildbot.plugins import *

from changes import GitPollerWithTags
from factory import ArchBuildFactory
from util import ArchBuildUtil
from worker import ArchBuildWorker

with open('config.yml', 'r') as f:
    config = yaml.load(f)

c = BuildmasterConfig = {}

c['workers'] = [ArchBuildWorker('worker', 'worker')]
c['protocols'] = {'pb': {'port': 8011}}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['services'] = []

if config['mail_reports']:
    c['services'].append(reporters.MailNotifier(
        fromaddr=config['sender'],
        extraRecipients=config['recipients'],
        sendToInterestedUsers=False,
        mode=('failing',)
    ))

c['title'] = 'Arch Build'
c['titleURL'] = config['url']
c['buildbotURL'] = config['url']
c['buildbotNetUsageData'] = None
c['www'] = {
    'port': 8010,
    'plugins': {
        # 'waterfall_view': {},
        # 'console_view': {},
        # 'grid_view': {}
    }
}

admins = config['admins']
if admins:
    c['www']['auth'] = util.UserPasswordAuth(admins)
    c['www']['authz'] = util.Authz(
        allowRules=[
            util.AnyControlEndpointMatcher(role='admin'),
        ],
        roleMatchers=[
            util.RolesFromUsername(roles=['admin'], usernames=admins.keys()),
        ]
    )

c['db'] = {'db_url': 'postgresql://buildbot:buildbot@/buildbot'}

c['properties'] = {'pkgbuilddir': config['pkgbuilddir']}

build_lock = util.MasterLock('build')

for repo in config['repos']:
    repodir = Path(config['repodir']) / repo / 'x86_64'
    if not repodir.is_dir():
        repodir.mkdir(parents=True)

for group in config['groups']:
    pkgs = group['pkgs']
    if pkgs is not None:
        for pkg in pkgs:
            properties = {
                'pkgbuilddir': config['pkgbuilddir'],
                'srcdir': config['srcdir'],
                'pkgdir': config['pkgdir'],
                'repodir': config['repodir'],
                'sshdir': config.get('sshdir', ''),
                'suffix': config['suffix'],
                'gpg_sign': config['gpg_sign'],
                'group': group['name'],
                'pkg_base': pkg['name'],
                'depends': pkg.get('depends', None),
                **ArchBuildUtil.parse_srcinfo(config['pkgbuilddir'], group['name'], pkg['name'])
            }

            # These can be overridden
            properties.pop('pkg_ver')
            properties.pop('pkg_rel')

            c['schedulers'].append(schedulers.ForceScheduler(
                name=f"force-{pkg['name']}",
                builderNames=[pkg['name']],
                properties=[
                    util.ChoiceStringParameter(
                        name='repo_name',
                        label='repo',
                        choices=config['repos'],
                        default=pkg['repo'] if 'repo' in pkg else group['repo']
                    ),
                    util.StringParameter(
                        name='pkg_ver',
                        label='pkgver',
                        default=''
                    ),
                    util.StringParameter(
                        name='pkg_rel',
                        label='pkgrel',
                        default=''
                    )
                ]
            ))
            c['builders'].append(util.BuilderConfig(
                name=pkg['name'],
                workernames=['worker'],
                factory=ArchBuildFactory(config['pkgbuilddir'], group['name'], pkg['name'], properties),
                locks=[build_lock.access('exclusive')]
            ))

            vcs_type = properties['vcs_type']
            if vcs_type == 'git':
                if properties['git_tag']:
                    c['change_source'].append(GitPollerWithTags(
                        config['sender'],
                        config['recipients'],
                        repourl=properties['vcs_url'],
                        category=pkg['name'],
                        workdir=str(Path(config['srcdir']) / properties['vcs_name']),
                        pollInterval=3600,
                        pollAtLaunch=True,
                        only_tags=True
                    ))
                else:
                    c['change_source'].append(changes.GitPoller(
                        repourl=properties['vcs_url'],
                        category=pkg['name'],
                        workdir=str(Path(config['srcdir']) / properties['vcs_name']),
                        pollInterval=3600,
                        pollAtLaunch=True
                    ))
            elif vcs_type == 'hg':
                c['change_source'].append(changes.HgPoller(
                    repourl=properties['vcs_url'],
                    category=pkg['name'],
                    workdir=str(Path(config['srcdir']) / properties['vcs_name']),
                    pollInterval=3600,
                    pollAtLaunch=True
                ))
            if vcs_type:
                branch = properties[f'{vcs_type}_branch']
                if branch:
                    change_filter = util.ChangeFilter(category=pkg['name'], branch=branch)
                else:
                    change_filter = util.ChangeFilter(category=pkg['name'])
                c['schedulers'].append(schedulers.SingleBranchScheduler(
                    name=pkg['name'],
                    change_filter=change_filter,
                    treeStableTimer=3600,
                    builderNames=[pkg['name']],
                    properties={'repo_name': pkg['repo'] if 'repo' in pkg else group['repo']}
                ))
